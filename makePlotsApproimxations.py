#!/usr/bin/env python
# coding: utf-8

# In[2]:


sols = {100: [331.0, 406.0, 364.0, 437.0, 390.0],
 150: [566.0, 621.0, 555.0, 582.0, 654.0],
 200: [738.0, 799.0, 835.0, 833.0, 829.0],
 250: [998.0, 1082.0, 973.0, 1042.0, 1005.0],
 300: [1196.0, 1261.0, 1251.0, 1208.0, 1164.0],
 350: [1397.0, 1380.0, 1405.0, 1324.0, 1390.0],
 400: [1591.0, 1542.0, 1567.0, 1633.0, 1538.0],
 450: [1780.0, 1740.0, 1791.0, 1779.0, 1808.0],
 500: [1983.0, 2021.0, 1952.0, 1951.0, 1899.0],
 550: [2247.0, 2198.0, 2139.0, 2122.0, 2197.0],
 600: [2429.0, 2432.0, 2311.0, 2363.0, 2380.0],
 650: [2538.0, 2527.0, 2577.0, 2620.0, 2560.0],
 700: [2822.0, 2778.0, 2863.0, 2913.0, 2797.0],
 750: [3061.0, 2900.0, 2873.0, 3019.0, 2927.0],
 800: [3238.0, 3313.0, 3146.0, 3158.0, 3263.0],
 850: [3349.0, 3392.0, 3548.0, 3503.0, 3465.0],
 900: [3519.0, 3569.0, 3548.0, 3478.0, 3696.0],
 950: [3708.0, 3840.0, 3842.0, 3749.0, 3856.0],
 1000: [4004.0, 3933.0, 3982.0, 3928.0, 3999.0]}
 
LinearRelax = {100: [(311, 332), (406, 406), (345, 364), (435, 437), (381, 391)],
 150: [(544, 566), (621, 621), (547, 556), (580, 584), (625, 654)],
 200: [(721, 739), (798, 799), (835, 835), (833, 833), (825, 829)],
 250: [(986, 998), (1068, 1082), (944, 974), (1033, 1042), (981, 1005)],
 300: [(1196, 1197), (1231, 1261), (1245, 1251), (1195, 1208), (1162, 1164)],
 350: [(1393, 1397), (1352, 1380), (1374, 1405), (1303, 1324), (1385, 1390)],
 400: [(1570, 1591), (1521, 1542), (1562, 1567), (1629, 1633), (1523, 1538)],
 450: [(1751, 1780), (1726, 1740), (1751, 1791), (1754, 1779), (1800, 1808)],
 500: [(1973, 1983), (1961, 2021), (1926, 1951), (1937, 1951), (1886, 1899)],
 550: [(2241, 2247), (2184, 2198), (2119, 2139), (2101, 2122), (2191, 2197)],
 600: [(2409, 2429), (2401, 2432), (2309, 2311), (2359, 2363), (2365, 2380)],
 650: [(2512, 2539), (2527, 2527), (2560, 2577), (2620, 2620), (2560, 2560)],
 700: [(2804, 2823), (2741, 2778), (2859, 2863), (2894, 2913), (2769, 2797)],
 750: [(3028, 3061), (2896, 2900), (2869, 2873), (3017, 3019), (2914, 2927)],
 800: [(3227, 3238), (3309, 3313), (3143, 3146), (3144, 3158), (3258, 3263)],
 850: [(3332, 3349), (3392, 3392), (3548, 3548), (3461, 3503), (3439, 3465)],
 900: [(3482, 3520), (3563, 3569), (3544, 3548), (3474, 3478), (3690, 3696)],
 950: [(3701, 3708), (3828, 3840), (3820, 3842), (3713, 3749), (3849, 3856)],
 1000: [(3984, 4004), (3919, 3933), (3954, 3983), (3926, 3928), (3998, 3999)]}
 
LagrangianRelax = {100: [(328, 332), (406, 406), (364, 364), (435, 437), (390, 391)],
 150: [(561, 566), (621, 621), (554, 556), (580, 584), (651, 654)],
 200: [(731, 739), (798, 799), (828, 835), (833, 833), (825, 829)],
 250: [(997, 998), (1076, 1082), (972, 973), (1040, 1042), (996, 1005)],
 300: [(1190, 1197), (1244, 1261), (1245, 1251), (1203, 1208), (1162, 1164)],
 350: [(1393, 1397), (1375, 1380), (1395, 1405), (1324, 1324), (1385, 1390)],
 400: [(1587, 1591), (1523, 1542), (1562, 1567), (1613, 1633), (1537, 1538)],
 450: [(1773, 1780), (1738, 1740), (1788, 1791), (1772, 1779), (1807, 1808)],
 500: [(1964, 1983), (1998, 2021), (1943, 1952), (1947, 1951), (1895, 1899)],
 550: [(2241, 2247), (2196, 2198), (2137, 2139), (2112, 2122), (2191, 2197)],
 600: [(2412, 2429), (2420, 2432), (2309, 2311), (2356, 2363), (2364, 2380)],
 650: [(2536, 2539), (2523, 2527), (2573, 2577), (2615, 2620), (2560, 2560)],
 700: [(2814, 2823), (2777, 2778), (2856, 2863), (2910, 2913), (2791, 2797)],
 750: [(3045, 3061), (2884, 2900), (2847, 2873), (3017, 3019), (2925, 2927)],
 800: [(3237, 3238), (3309, 3313), (3143, 3146), (3157, 3158), (3258, 3263)],
 850: [(3345, 3349), (3392, 3392), (3548, 3548), (3497, 3503), (3447, 3465)],
 900: [(3500, 3519), (3563, 3569), (3544, 3548), (3467, 3478), (3690, 3696)],
 950: [(3701, 3708), (3839, 3840), (3830, 3842), (3740, 3749), (3855, 3856)],
 1000: [(3991, 4004), (3910, 3933), (3940, 3982), (3926, 3928), (3989, 3999)]}


# In[8]:


def avg(array):
    return sum(array)/len(array)
linearGaps = {}
for key in LinearRelax:
    linearGaps[key] = []
    for (lb, ub) in LinearRelax[key]:
        linearGaps[key].append(100 * (ub - lb) / ub) 

lagrangianGaps = {}
for key in LagrangianRelax:
    lagrangianGaps[key] = []
    for (lb, ub) in LagrangianRelax[key]:
        lagrangianGaps[key].append(100 * (ub - lb) / ub) 
        
linearAvg={}
for key in linearGaps:
    linearAvg[key] = avg(linearGaps[key])

lagrangianAvg={}
for key in lagrangianGaps:
    lagrangianAvg[key] = avg(lagrangianGaps[key])


# In[9]:


linearAvg


# In[10]:


lagrangianAvg


# In[12]:


import matplotlib.pylab as plt
plt.figure(figsize=(15,9))
lists = sorted(linearAvg.items()) # sorted by key, return a list of tuples

x, y = zip(*lists) # unpack a list of pairs into two tuples

plt.plot(x, y)

lists = sorted(lagrangianAvg.items())

x, y = zip(*lists) # unpack a list of pairs into two tuples

plt.plot(x, y)


plt.legend(['Linear relaxation', 'Lagrangian relaxation'], prop={'size':20})
plt.title("Average gap of approximations on sparse graphs", size=28, weight='bold')
plt.xlabel("Number of vertices", size=20)
plt.ylabel("Gap (%)", size=20)
plt.tick_params(axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.show()


# In[14]:


LinearRelax= {100: [(661, 809), (837, 837), (675, 811), (728, 780), (628, 795)],
 150: [(949, 1256), (1190, 1257), (1034, 1268), (1052, 1248), (1171, 1281)],
 200: [(1603, 1730), (1573, 1748), (1430, 1765), (1504, 1706), (1488, 1712)],
 250: [(1914, 2202), (2122, 2206), (2059, 2209), (1909, 2206), (2019, 2205)],
 300: [(2487, 2691), (2144, 2655), (2221, 2676), (2476, 2662), (2418, 2691)],
 350: [(2726, 3186), (2896, 3196), (2697, 3162), (2777, 3161), (2783, 3190)],
 400: [(3341, 3646), (3551, 3666), (3334, 3683), (3704, 3704), (3346, 3680)],
 450: [(3817, 4138), (3643, 4180), (3703, 4160), (3870, 4204), (3744, 4138)],
 500: [(4687, 4687), (4248, 4630), (4123, 4650), (4409, 4708), (4464, 4691)],
 550: [(4608, 5207), (4818, 5175), (4690, 5150), (4722, 5198), (4631, 5159)],
 600: [(5253, 5691), (5650, 5650), (5120, 5673), (5195, 5716), (5473, 5653)],
 650: [(6068, 6213), (5501, 6153), (5631, 6150), (5805, 6192), (5769, 6181)]}

LagrangianRelax={100: [(808, 809), (837, 837), (801, 811), (771, 780), (787, 795)],
 150: [(1244, 1255), (1251, 1257), (1253, 1268), (1246, 1248), (1264, 1281)],
 200: [(1724, 1730), (1738, 1748), (1749, 1765), (1698, 1705), (1710, 1712)],
 250: [(2199, 2202), (2201, 2206), (2199, 2209), (2171, 2206), (2197, 2205)],
 300: [(2684, 2691), (2647, 2655), (2663, 2675), (2654, 2662), (2681, 2690)],
 350: [(3172, 3186), (3179, 3196), (3148, 3162), (3146, 3160), (3184, 3189)],
 400: [(3641, 3646), (3661, 3666), (3676, 3681), (3704, 3704), (3674, 3680)],
 450: [(4116, 4138), (4154, 4180), (4152, 4160), (4200, 4204), (4119, 4138)],
 500: [(4687, 4687), (4607, 4630), (4629, 4650), (4691, 4708), (4679, 4691)],
 550: [(5187, 5206), (5145, 5175), (5150, 5150), (5189, 5198), (5146, 5159)],
 600: [(5678, 5691), (5650, 5650), (5667, 5673), (5712, 5716), (5645, 5653)],
 650: [(6205, 6213), (6145, 6153), (6150, 6150), (6185, 6191), (6179, 6181)]}

sols={100: [809.0, 837.0, 810.0, 779.0, 794.0],
 150: [1255.0, 1256.0, 1267.0, 1248.0, 1279.0],
 200: [1730.0, 1748.0, 1764.0, 1705.0, 1711.0],
 250: [2202.0, 2205.0, 2209.0, 2206.0, 2205.0],
 300: [2691.0, 2655.000000042445, 2675.0, 2662.0, 2690.0],
 350: [3186.0, 3196.0, 3162.0, 3160.0, 3189.0],
 400: [3646.0, 3666.0, 3681.0, 3704.0, 3679.0],
 450: [4138.0, 4180.0, 4160.0, 4204.0, 4138.0],
 500: [4687.0, 4630.0, 4650.0, 4708.0, 4691.0],
 550: [5206.0, 5175.0, 5150.0, 5198.0, 5159.0],
 600: [5691.0, 5650.0, 5673.0, 5716.0, 5653.0],
 650: [6213.0, 6152.0, 6150.0, 6191.0, 6180.0]}


# In[15]:


def avg(array):
    return sum(array)/len(array)
linearGaps = {}
for key in LinearRelax:
    linearGaps[key] = []
    for (lb, ub) in LinearRelax[key]:
        linearGaps[key].append(100 * (ub - lb) / ub) 

lagrangianGaps = {}
for key in LagrangianRelax:
    lagrangianGaps[key] = []
    for (lb, ub) in LagrangianRelax[key]:
        lagrangianGaps[key].append(100 * (ub - lb) / ub) 
        
linearAvg={}
for key in linearGaps:
    linearAvg[key] = avg(linearGaps[key])

lagrangianAvg={}
for key in lagrangianGaps:
    lagrangianAvg[key] = avg(lagrangianGaps[key])


# In[16]:


import matplotlib.pylab as plt
plt.figure(figsize=(15,9))
lists = sorted(linearAvg.items()) # sorted by key, return a list of tuples

x, y = zip(*lists) # unpack a list of pairs into two tuples

plt.plot(x, y)

lists = sorted(lagrangianAvg.items())

x, y = zip(*lists) # unpack a list of pairs into two tuples

plt.plot(x, y)


plt.legend(['Linear relaxation', 'Lagrangian relaxation'], prop={'size':20})
plt.title("Average gap of approximations on dense graphs", size=28, weight='bold')
plt.xlabel("Number of vertices", size=20)
plt.ylabel("Gap (%)", size=20)
plt.tick_params(axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.show()


# In[6]:


LinearRelax_dense= {100: [(546, 554), (556, 558), (585, 591), (551, 565), (568, 568)],
 150: [(953, 965), (967, 967), (930, 930), (927, 978), (902, 929)],
 200: [(1250, 1313), (1317, 1329), (1325, 1325), (1236, 1297), (1228, 1253)],
 250: [(1688, 1700), (1563, 1694), (1668, 1690), (1681, 1685), (1637, 1651)],
 300: [(2047, 2118), (2059, 2096), (2101, 2135), (2013, 2093), (2032, 2129)],
 350: [(2434, 2489), (2417, 2519), (2429, 2520), (2456, 2460), (2350, 2476)],
 400: [(2861, 2876), (2825, 2898), (2707, 2865), (2847, 2892), (2767, 2846)],
 450: [(3232, 3348), (3339, 3341), (3073, 3318), (3154, 3275), (3308, 3308)],
 500: [(3584, 3779), (3655, 3723), (3455, 3720), (3554, 3752), (3609, 3802)],
 550: [(3686, 4150), (4036, 4161), (3961, 4220), (4187, 4195), (4207, 4224)],
 600: [(4421, 4628), (4273, 4596), (4605, 4672), (4389, 4658), (4283, 4570)],
 650: [(4930, 5070), (4746, 5081), (4725, 5053), (5058, 5058), (4594, 5032)],
 700: [(5303, 5481), (5198, 5496), (5295, 5512), (5415, 5504), (5221, 5423)],
 750: [(5722, 5849), (5823, 5922), (5670, 5952), (5770, 5937), (5755, 5930)],
 800: [(6167, 6326), (5943, 6410), (6336, 6336), (5778, 6349), (6065, 6349)],
 850: [(6631, 6807), (6739, 6937), (6331, 6808), (6567, 6798), (6762, 6862)],
 900: [(7016, 7270), (7145, 7330), (7337, 7337), (6690, 7290), (6973, 7282)],
 950: [(7525, 7649), (7520, 7700), (7604, 7732), (7452, 7773), (7362, 7700)],
 1000: [(7625, 8155), (7937, 8154), (7798, 8172), (7862, 8165), (7425, 8102)]}


sol_dense={100: [553.0, 558.0, 591.0, 565.0, 568.0],
 150: [965.0, 967.0, 930.0, 977.0, 929.0],
 200: [1313.0, 1329.0, 1325.0, 1297.0, 1253.0],
 250: [1700.0, 1694.0, 1690.0, 1685.0, 1652.0],
 300: [2118.0, 2096.0, 2135.0, 2093.0, 2129.0],
 350: [2489.0, 2519.0, 2520.0, 2460.0, 2476.0],
 400: [2876.0, 2898.0, 2865.0, 2892.0, 2847.0],
 450: [3348.0, 3341.0, 3318.0, 3276.0, 3308.0],
 500: [3779.0, 3723.0, 3720.0, 3753.0, 3802.0],
 550: [4150.0, 4161.0, 4220.0, 4195.0, 4224.0],
 600: [4628.0, 4596.0, 4672.0, 4658.0, 4569.0],
 650: [5070.0, 5081.0, 5053.0, 5058.0, 5032.0],
 700: [5481.0, 5496.000000051551, 5512.0, 5504.0, 5423.0],
 750: [5849.0, 5922.0, 5952.0, 5936.0, 5930.0],
 800: [6326.0, 6410.0, 6336.0, 6349.0, 6350.0],
 850: [6807.0, 6937.0, 6808.0, 6798.0, 6862.0],
 900: [7270.0, 7330.0, 7337.0, 7290.0, 7282.0],
 950: [7649.0, 7700.000000068727, 7732.0, 7773.0, 7700.0],
 1000: [8155.0, 8154.0, 8172.0, 8165.0, 8102.0]}\

sol_sparse = {100: [282.0, 254.0, 258.0, 264.0, 265.0],
 150: [372.0, 378.0, 372.0, 356.0, 420.0],
 200: [524.0, 530.0, 546.0, 528.0, 502.0],
 250: [615.0, 634.0, 674.0, 633.0, 578.0],
 300: [766.0, 745.0, 833.0, 817.0, 825.0],
 350: [1027.0, 899.0, 949.0, 900.0, 914.0],
 400: [1015.0, 1068.0, 1016.0, 1068.0, 988.0],
 450: [1192.0, 1198.0, 1165.0, 1182.0, 1131.0],
 500: [1270.0, 1232.0, 1279.0, 1331.0, 1242.0],
 550: [1472.0, 1443.0, 1449.0, 1508.0, 1476.0],
 600: [1570.0, 1649.0, 1513.0, 1542.0, 1548.0],
 650: [1680.0, 1769.0, 1703.0, 1799.0, 1712.0],
 700: [1807.0, 1819.0, 1801.0, 1835.0, 1763.0],
 750: [1940.0, 1931.0, 1999.0, 1833.0, 1994.0],
 800: [2136.0, 1987.0, 2004.0, 2040.0, 2101.0],
 850: [2319.0, 2262.0, 2211.0, 2046.0, 2119.0],
 900: [2302.0, 2389.0, 2303.0, 2333.0, 2418.0],
 950: [2527.0, 2496.0, 2513.0, 2466.0, 2421.0],
 1000: [2654.0, 2533.0, 2541.0, 2602.0, 2632.0]}

LinearRelax_sparse = {100: [(280, 283), (240, 255), (251, 259), (261, 264), (260, 265)],
 150: [(351, 372), (354, 379), (369, 372), (353, 356), (420, 421)],
 200: [(524, 524), (523, 530), (542, 547), (514, 529), (501, 502)],
 250: [(595, 615), (627, 635), (668, 674), (612, 633), (578, 579)],
 300: [(757, 766), (732, 745), (818, 834), (812, 818), (806, 825)],
 350: [(1024, 1027), (891, 899), (943, 949), (894, 900), (912, 914)],
 400: [(1011, 1015), (1066, 1069), (1012, 1016), (1063, 1068), (977, 988)],
 450: [(1182, 1192), (1197, 1198), (1163, 1165), (1180, 1182), (1130, 1131)],
 500: [(1264, 1270), (1229, 1232), (1272, 1279), (1323, 1331), (1239, 1242)],
 550: [(1436, 1472), (1439, 1443), (1444, 1449), (1499, 1508), (1476, 1476)],
 600: [(1561, 1571), (1633, 1649), (1509, 1513), (1542, 1542), (1542, 1548)],
 650: [(1678, 1680), (1769, 1769), (1699, 1703), (1792, 1799), (1707, 1712)],
 700: [(1803, 1807), (1819, 1819), (1795, 1801), (1834, 1835), (1763, 1763)],
 750: [(1938, 1940), (1931, 1931), (1982, 1999), (1812, 1833), (1985, 1994)],
 800: [(2133, 2136), (1986, 1987), (1986, 2004), (2036, 2040), (2094, 2101)],
 850: [(2304, 2319), (2257, 2262), (2209, 2211), (2043, 2046), (2111, 2119)],
 900: [(2297, 2302), (2388, 2389), (2302, 2303), (2326, 2333), (2416, 2418)],
 950: [(2525, 2527), (2496, 2496), (2491, 2513), (2461, 2466), (2418, 2421)],
 1000: [(2649, 2654), (2533, 2533), (2525, 2541), (2581, 2602), (2624, 2632)]}


# In[8]:


def avg(array):
    return sum(array)/len(array)
linearGaps_sparse = {}
for key in LinearRelax_sparse:
    linearGaps_sparse[key] = []
    for (lb, ub) in LinearRelax_sparse[key]:
        linearGaps_sparse[key].append(100 * (ub - lb) / ub) 

        
linearAvg_sparse={}
for key in linearGaps_sparse:
    linearAvg_sparse[key] = avg(linearGaps_sparse[key])

linearGaps_dense = {}
for key in LinearRelax_dense:
    linearGaps_dense[key] = []
    for (lb, ub) in LinearRelax_dense[key]:
        linearGaps_dense[key].append(100 * (ub - lb) / ub) 

        
linearAvg_dense={}
for key in linearGaps_dense:
    linearAvg_dense[key] = avg(linearGaps_dense[key])


# In[13]:


import matplotlib.pylab as plt
plt.figure(figsize=(15,9))
lists = sorted(linearAvg_sparse.items()) # sorted by key, return a list of tuples

x, y = zip(*lists) # unpack a list of pairs into two tuples

plt.plot(x, y)

lists = sorted(linearAvg_dense.items())

x, y = zip(*lists) # unpack a list of pairs into two tuples

plt.plot(x, y)


plt.legend(['Sparse Graphs', 'Dense Graphs'], prop={'size':20})
plt.title("Average gap of linear relaxation on bipartite graphs", size=28, weight='bold')
plt.xlabel("Number of vertices", size=20)
plt.ylabel("Gap (%)", size=20)
plt.tick_params(axis='x', labelsize=20)
plt.tick_params(axis='y', labelsize=20)
plt.show()


# In[ ]:





# In[ ]:




